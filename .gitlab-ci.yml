stages:
 - build
 - create_tag
 - test
 - deploy
 
build-job:
   stage: build
   image:
     name: gcr.io/kaniko-project/executor:v1.14.0-debug
   script:
    - cp ${CI_PROJECT_DIR}.tmp/AUTHBASIC  ${CI_PROJECT_DIR}/AssemblyMaster/privateauth
    - cp ${CI_PROJECT_DIR}.tmp/SSHKEY  ${CI_PROJECT_DIR}/AssemblyMaster/terraform
    - /kaniko/executor
       --context "${CI_PROJECT_DIR}"
       --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
       --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
   rules:
     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch
     
create_tag:
  stage: create_tag
  script:
    - cp ${CI_PROJECT_DIR}.tmp/AUTHBASIC  ${CI_PROJECT_DIR}/AssemblyMaster/privateauth
    - cp ${CI_PROJECT_DIR}.tmp/SSHKEY  ${CI_PROJECT_DIR}/AssemblyMaster/terraform
    - /kaniko/executor
       --context "${CI_PROJECT_DIR}"
       --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
       --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  only:
    - tags  # Executar quando uma tag for criada manualmente

sonarqube-check:
   image: mcr.microsoft.com/dotnet/sdk:8.0
   variables:
     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
   cache:
     key: "${CI_JOB_NAME}"
     paths:
       - .sonar/cache
   script: 
       - "apt-get update"
       - "apt-get install --yes openjdk-17-jre-headless"
       - "dotnet tool install --global dotnet-sonarscanner --version 6.2.0"
       - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
       - "dotnet sonarscanner begin /k:\"${token_repository}\" /d:sonar.login=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
       - "dotnet build"
       - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
   allow_failure: true
   rules:
     - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch

deploy:
  stage: deploy
  image: ubuntu:rolling
  before_script:
    - apt-get update && apt install curl -y
    - curl -LO https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl &&    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
    - echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - echo $KUBECONFIG_BASE64 |  > ./kubeconfig

  script:
    - IMAGE_NAME="${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"  # Defina o nome da sua imagem
    - sed -i "s|IMAGE_DEPLOY|${IMAGE_NAME}|g" ${CI_PROJECT_DIR}/k8s/deployment.yaml  # Substituir ocorrÃªncias de IMAGE_DEPLOY pelo nome da imagem
    - kubectl --kubeconfig=/builds/agro-amazonia/administration-painel.tmp/KUBECONFIG_BASE64 apply -f ${CI_PROJECT_DIR}/k8s/ -n administration-painel 
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch
